// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/**
 * Prisma Models and Enums for Products
 */
enum ProductType {
  CPU
  MOTHERBOARD
  RAM
  STORAGE
  GPU
  CASE
  PSU
  CPU_COOLER
  MONITOR
  KEYBOARD
  MOUSE
}

model Product {
  id               String      @id @default(cuid())
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  name             String      @unique
  slug             String      @unique
  imageUrl         String
  brand            String
  price            Float
  stockCount       Int         @default(0)
  productType      ProductType
  specs            Json
  shortDescription String
  longDescription  String
  isOnSale         Boolean     @default(false)
  reducedPrice     Float?
  isFeatured       Boolean     @default(false)
  categories       Category[]  @relation("ProductCategories")
  oneStarReviews   Int         @default(0)
  twoStarReviews   Int         @default(0)
  threeStarReviews Int         @default(0)
  fourStarReviews  Int         @default(0)
  fiveStarReviews  Int         @default(0)
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  slug     String    @unique
  products Product[] @relation("ProductCategories")
}

/**
 * Prisma Models for Account, Session, User and Auth
 */

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  accounts       Account[]
  sessions       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
