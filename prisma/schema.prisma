// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/**
 * Prisma Models and Enums for Products
 */
enum ProductType {
  CPU
  GPU
  RAM
  STORAGE
  MOTHERBOARD
  POWER_SUPPLY
  SOUND_CARD
  COOLING
  CASE_FAN
  CASE
  MOUSE
  KEYBOARD
  HEADSET
  MICROPHONE
  WEBCAM
  MONITOR
  OPTICAL_DRIVE
  CABLE
  LAPTOP
  PRINTER
}

model Product {
  id               String         @id
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  name             String         @unique
  slug             String         @unique
  imageUrl         String
  brand            String
  price            Float
  stockCount       Int            @default(0)
  productType      ProductType
  specs            Json
  shortDescription String
  longDescription  String
  isOnSale         Boolean        @default(false)
  reducedPrice     Float?
  isFeatured       Boolean        @default(false)
  categories       Category[]     @relation("ProductCategories")
  oneStarReviews   Int            @default(0)
  twoStarReviews   Int            @default(0)
  threeStarReviews Int            @default(0)
  fourStarReviews  Int            @default(0)
  fiveStarReviews  Int            @default(0)
  cartItems        CartItem[]
  wishlistItems    WishlistItem[]
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  slug     String    @unique
  products Product[] @relation("ProductCategories")
}

/**
 * Prisma Models for Account, Session, User and Auth
 */

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/**
 * Prisma Models for User, User Cart, User Wishlist, User Profile and User Payment Methods
 */

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  accounts       Account[]
  sessions       Session[]
  cartItems      CartItem[]
  wishlistItems  WishlistItem[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  profile        UserProfile?
  paymentMethods PaymentMethod[]
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
}

model UserProfile {
  id          String    @id @default(cuid())
  userId      String    @unique
  firstName   String?
  lastName    String?
  phoneNumber String?
  birthDate   DateTime?
  gender      String?
  street      String?
  zipCode     String?
  city        String?
  country     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum PaymentMethodType {
  CREDIT_CARD
  PAYPAL
}

model PaymentMethod {
  id             String            @id @default(cuid())
  userId         String
  type           PaymentMethodType
  provider       String
  cardHolderName String
  last4          String
  expiryMonth    Int
  expiryYear     Int
  isDefault      Boolean           @default(false)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
